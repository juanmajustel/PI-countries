import React from "react";
import "./Paginated.css";

export default function Paginated({
  allCountries,
  countriesPage,
  paginatedNum,
  currPage,
  setCurrPage,
}) {
  const handlePageClick = (num) => {
    setCurrPage(num);
    paginatedNum(num);
  };

  const totalPages = Math.ceil(allCountries.length / countriesPage);
  const visiblePages = 4; // N√∫mero de p√°ginas visibles
  const range = calculatePageRange(currPage, totalPages, visiblePages);

  function calculatePageRange(currPage, totalPages, visiblePages) {
    let startPage;
    let endPage;

    if (totalPages <= visiblePages) {
      startPage = 1;
      endPage = totalPages;
    } else {
      if (currPage <= Math.ceil(visiblePages / 2)) {
        startPage = 1;
        endPage = visiblePages;
      } else if (currPage >= totalPages - Math.floor(visiblePages / 2)) {
        startPage = totalPages - visiblePages + 1;
        endPage = totalPages;
      } else {
        startPage = currPage - Math.floor(visiblePages / 2);
        endPage = currPage + Math.ceil(visiblePages / 2) - 1;
      }
    }

    return { startPage, endPage };
  }

  return (
    <nav>
      <ul className="paging">
        {currPage > 1 && (
          <li>
            <button
              onClick={() => handlePageClick(currPage - 1)}
              className="page-button"
            >
              {"ü°∞"}
            </button>
          </li>
        )}

        {Array.from({ length: range.endPage - range.startPage + 1 }).map(
          (_, index) => {
            const num = range.startPage + index;
            return (
              <li key={num}>
                <button
                  onClick={() => handlePageClick(num)}
                  className={`page-button ${num === currPage ? "active" : ""}`}
                >
                  {num}
                </button>
              </li>
            );
          }
        )}

        {currPage < totalPages && (
          <li>
            <button
              onClick={() => handlePageClick(currPage + 1)}
              className="page-button"
            >
              {"ü°≤"}
            </button>
          </li>
        )}
      </ul>
    </nav>
  );
}
//Array.from({ length: range.endPage - range.startPage + 1 }) se utiliza para crear una matriz de n√∫meros que corresponde a las p√°ginas que se mostrar√°n en la paginaci√≥n. El rango de p√°ginas se calcula utilizando las variables range.startPage y range.endPage, y se utiliza Array.from() para crear una matriz de longitud igual a la diferencia entre endPage y startPage m√°s 1. Luego, se utiliza .map() para iterar sobre esta matriz y generar los elementos correspondientes para cada n√∫mero de p√°gina.

//  El componente Paginated se encarga de mostrar la paginaci√≥n en la interfaz de usuario y manejar las interacciones con los botones de p√°gina. Aqu√≠ est√° el resumen de cada parte:

// handlePageClick: Es una funci√≥n que se ejecuta cuando se hace clic en un bot√≥n de p√°gina. Recibe el n√∫mero de p√°gina como argumento y actualiza el estado currPage utilizando la funci√≥n setCurrPage proporcionada por las props. Tambi√©n llama a la funci√≥n paginatedNum para realizar acciones adicionales relacionadas con la p√°gina seleccionada.

// pagin: Es una variable que calcula el n√∫mero total de p√°ginas en funci√≥n de la longitud de la lista de pa√≠ses y la cantidad de pa√≠ses por p√°gina. Utiliza la funci√≥n Math.ceil() para redondear hacia arriba y asegurarse de tener un n√∫mero entero de p√°ginas.

// pagesNumber: Es una matriz que contiene los n√∫meros de p√°gina que se mostrar√°n en la paginaci√≥n. Utiliza un bucle for para generar los n√∫meros de p√°gina del 1 al pagin y los agrega a la matriz.

// Dentro del JSX del componente, se utiliza un bucle .map() para renderizar cada bot√≥n de p√°gina. Cada bot√≥n se renderiza como un <li> con un <button> dentro. Se asigna la clase "active" al bot√≥n de p√°gina actual (num === currPage) para resaltarlo visualmente.

// Adem√°s, se agregaron los botones de navegaci√≥n "‚Üê" y "‚Üí" para ir a la p√°gina anterior y siguiente respectivamente. Estos botones se renderizan condicionalmente utilizando la comparaci√≥n currPage < totalPages. Al hacer clic en estos botones, se llama a la funci√≥n handlePageClick con el n√∫mero de p√°gina correspondiente.

// En resumen, el componente Paginated muestra los botones de p√°gina y permite al usuario navegar a trav√©s de las p√°ginas mediante la funci√≥n handlePageClick
